@model  Merchandising.VM.Portal.UserVM
@{
    ViewBag.Title = "User | Create";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="row wrapper border-bottom white-bg page-heading">
        <div class="col-sm-8 col-md-8 col-lg-8">
            <h2>Users</h2>
            <ol class="breadcrumb">
                <li>
                    <a href="@Url.Action("Home_Index", "Home")">Home</a>
                </li>
                <li>
                    <a>Administration</a>
                </li>
                <li>
                    <a>Set-Up</a>
                </li>
                <li>
                    <a>General</a>
                </li>
                <li class="active">
                    <strong>Users</strong>
                </li>
            </ol>
        </div>
        <div class="col-sm-4 col-md-4 col-lg-4">
            <div class="title-action">
                <button type="button" class="btn btn-outline btn-rounded btn-primary" id="submit"><i class="fa fa-plus-circle"></i> Save</button>
                <button type="button" class="btn btn-outline btn-rounded btn-danger" onclick="location.href='@Url.Action("Index", "Users")'"><i class="fa fa-home"></i> Home</button>
            </div>
        </div>
    </div>

    <div class="wrapper wrapper-content animated fadeInRight">
        <div class="ibox-heading">
            <div class="ibox-content">
                <h3>Create User</h3>
            </div>
        </div>
        <div class="ibox-content m-b-sm border-bottom">
            <div class="form-horizontal">
                <div class="form-group">
                    @Html.LabelFor(model => model.Users.UserId, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-5">
                        @Html.EditorFor(model => model.Users.UserId, new { htmlAttributes = new { @class = "form-control", id = "userid" } })
                    </div>
                    <div class="col-md-5">
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Users.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-5">
                        @Html.EditorFor(model => model.Users.UserName, new { htmlAttributes = new { @class = "form-control", id = "username" } })
                    </div>
                    <div class="col-md-5">
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Users.Password, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-5">
                        @Html.EditorFor(model => model.Users.Password, new { htmlAttributes = new { @class = "form-control", id = "password" } })
                    </div>
                    <div class="col-md-5">
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Users.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-5">
                        @Html.EditorFor(model => model.Users.Email, new { htmlAttributes = new { @class = "form-control", id = "email" } })
                    </div>
                    <div class="col-md-5">
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Users.ContactNo, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-5">
                        @Html.EditorFor(model => model.Users.ContactNo, new { htmlAttributes = new { @class = "form-control", id = "contact", @onkeypress = "return isNumberKey(event)" } })
                    </div>
                    <div class="col-md-5">
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.AccessRoleOption, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-5">
                        @Html.DropDownListFor(model => model.Users.Role, new SelectList(Model.AccessRoleOption, "Value", "Text"), "- Please select your role -", new { @class = "form-control", @id = "role" })
                    </div>
                    <div class="col-md-5">
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.BranchOption, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-5">
                        @Html.DropDownListFor(model => model.Users.BranchCode, new SelectList(Model.BranchOption, "Value", "Text"), "- Please select branch -", new { @class = "form-control", @id = "branch" })
                    </div>
                    <div class="col-md-5">
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.StatusOption, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-5">
                        @Html.DropDownListFor(model => model.Users.Status, new SelectList(Model.StatusOption, "Value", "Text","1"), "- Please select status -", new { @class = "form-control", @id = "status" })
                    </div>
                    <div class="col-md-5">
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@section Styles {
    @*@Styles.Render("~/plugins/sweetAlertStyles")*@
    @Styles.Render("~/plugins/toastrStyles")
    @Styles.Render("~/Content/plugins/chosen/chosenStyles")
    <link href="~/Content/plugins/sweetalert/sweetalert2.css" rel="stylesheet" />
}

@section Scripts{
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/plugins/toastr")
    @*@Scripts.Render("~/plugins/sweetAlert")*@
    @Scripts.Render("~/plugins/chosen")
    <script src="~/Scripts/plugins/sweetalert/sweetalert2.min.js"></script>

    <script type="text/javascript">

        // Bind normal buttons
        //Ladda.bind('.ladda-button', { timeout: 2000 });

        $('.chosen-select').chosen({ width: "100%" });


        //$('.i-checks').iCheck({
        //    checkboxClass: 'icheckbox_square-green',
        //    radioClass: 'iradio_square-green',
        //});

        function validatetoemail(my_email) {
            var filter = /^[_a-z0-9-]+(\.[_a-z0-9-]+)*@@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$/;
            if (filter.test(my_email)) {
                return true;
            }
            else {
                return false;
            }
        }
        function isNumberKey(evt) {

            var charCode = (evt.which) ? evt.which : event.keyCode;

            if (charCode > 31 && (charCode != 46 && (charCode < 48 || charCode > 57)))
                return false;
            return true;
        }
        $(document).ready(function () {

            $('#submit').click(function () {
                var isAllValid = true;

                if ($('#userid').val().trim() === '') {
                    $('.custom-alert').fadeIn();
                    toastr.warning('User ID is required.', 'System Warning');
                    isAllValid = false;
                }


                if ($('#username').val().trim() === '') {

                    $('.custom-alert').fadeIn();
                    toastr.warning('User Name is required.', 'System Warning');
                    isAllValid = false;
                }

                if ($('#password').val().trim() === '') {

                    $('.custom-alert').fadeIn();
                    toastr.warning('Password is required.', 'System Warning');
                    isAllValid = false;
                }

                if ($('#password').val().length < 4) {
                    $('.custom-alert').fadeIn();
                    toastr.warning('Password must be at least 4 characters.', 'System Warning');

                    isAllValid = false;
                }

                if ($('#email').val().trim() != '') {
                    if (validatetoemail($('#email').val().trim())) {
                    }
                    else {

                        $('.custom-alert').fadeIn();
                        toastr.warning('Email is not valid email address.', 'System Warning');

                        isAllValid = false;
                    }
                }

                if ($('#email').val().trim() === '') {
                    $('.custom-alert').fadeIn();
                    toastr.warning('Email is required.', 'System Warning');
                    isAllValid = false;
                }
                if ($('#branch').val().trim() === '') {

                    $('.custom-alert').fadeIn();
                    toastr.warning('Branch is required.', 'System Warning');

                    isAllValid = false;
                }

                if ($('#role').val() === '') {

                    $('.custom-alert').fadeIn();
                    toastr.warning('Role is required.', 'System Warning');

                    isAllValid = false;
                }
                if (isAllValid) {
                    swal({
                        title: "Are you sure?",
                        text: "You want to add User!",
                        type: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#DD6B55",
                        confirmButtonText: "Yes, add user!",
                        cancelButtonText: "No, cancel adding!"
                    }).then((result) => {
                        if (result.value) {
                            swal({
                                title: 'Loading... Please Wait!',
                                text: 'Adding User...',
                                allowOutsideClick: false,
                                allowEscapeKey: false,
                                onOpen: () => {
                                    swal.showLoading();
                                }
                            });
                            var data = {
                                UserId: $('#userid').val().trim(),
                                UserName: $('#username').val().trim(),
                                Password: $('#password').val().trim(),
                                Role: $('#role').val().trim(),
                                BranchCode: $('#branch').val().trim(),
                                ContactNo: $('#contact').val().trim(),
                                Email: $('#email').val().trim(),
                                Status: $('#status').val().trim(),
                                LastAccess: ''
                            }
                            var requestURL = '../../../Users/Save';
                            var forcomplete = {};
                            $.ajax({
                                type: "POST",
                                contentType: "application/json; charset=utf-8",
                                url: requestURL,
                                data: JSON.stringify(data),
                                dataType: "json",
                                success: function (data2) {
                                    forcomplete = data2;
                                },
                                complete: function () {
                                     swal.hideLoading();
                                    swal({
                                        type: forcomplete.HttpStatus === 200 ? 'success' : 'warning',
                                        title: forcomplete.HttpStatus === 200 ? "Successful" : "Error adding user!",
                                        text: forcomplete.Message,
                                        allowOutsideClick: false,
                                        allowEscapeKey: false
                                    }).then((result) => {
                                        if (forcomplete.HttpStatus === 200) {
                                            if (result.value) {
                                                var url = '@Url.Action("Index")';
                                                window.location.href = url;
                                            }
                                        }
                                    });
                                },
                                error: function (data3) {
                                    swal.hideLoading();
                                    swal({
                                        type: 'warning',
                                        title: "Error adding user!",
                                        text: data3.Message,
                                        allowOutsideClick: false,
                                        allowEscapeKey: false
                                    });
                                }
                            });
                        }
                    });
                };
            });//end

        });
    </script>
}
